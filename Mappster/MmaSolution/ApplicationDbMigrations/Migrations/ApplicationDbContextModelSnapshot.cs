// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MmaSolution.EntityFramework;

#nullable disable

namespace ApplicationDbMigrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MmaSolution.Core.Database.Localization.Language", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageCode = "ar",
                            LanguageName = "العربية"
                        },
                        new
                        {
                            Id = 2,
                            LanguageCode = "en",
                            LanguageName = "English"
                        });
                });

            modelBuilder.Entity("MmaSolution.Core.Database.Localization.Resource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Resources", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Key = "REQUIRED_FIELD",
                            LanguageId = 2,
                            Value = "Required field"
                        },
                        new
                        {
                            Id = 2L,
                            Key = "TOKEN_VALIDATION_FAILED",
                            LanguageId = 2,
                            Value = "cannot validate the token"
                        },
                        new
                        {
                            Id = 3L,
                            Key = "PASSWORD_RESET_EMAIL_SENT",
                            LanguageId = 2,
                            Value = "Check your email to reset your password"
                        },
                        new
                        {
                            Id = 4L,
                            Key = "DATA_LOAD_SUCCESS",
                            LanguageId = 2,
                            Value = "data loaded successfully"
                        },
                        new
                        {
                            Id = 5L,
                            Key = "DATA_MODIFY_SUCCESS",
                            LanguageId = 2,
                            Value = "data modified successfully"
                        },
                        new
                        {
                            Id = 6L,
                            Key = "DATA_REMOVE_SUCCESS",
                            LanguageId = 2,
                            Value = "data removed successfully"
                        },
                        new
                        {
                            Id = 7L,
                            Key = "DATA_SAVE_SUCCESS",
                            LanguageId = 2,
                            Value = "data saved successfully"
                        },
                        new
                        {
                            Id = 8L,
                            Key = "EMAIL_CONFIRM_SUCCESS",
                            LanguageId = 2,
                            Value = "Email successfully confirmed"
                        },
                        new
                        {
                            Id = 9L,
                            Key = "EMAIL_CONFIRM_ERROR",
                            LanguageId = 2,
                            Value = "Error while confirming your email"
                        },
                        new
                        {
                            Id = 10L,
                            Key = "DATA_LOAD_ERROR",
                            LanguageId = 2,
                            Value = "error while loading data"
                        },
                        new
                        {
                            Id = 11L,
                            Key = "DATA_READ_ERROR",
                            LanguageId = 2,
                            Value = "error while reading data"
                        },
                        new
                        {
                            Id = 12L,
                            Key = "DATA_REMOVE_ERROR",
                            LanguageId = 2,
                            Value = "error while removing data"
                        },
                        new
                        {
                            Id = 13L,
                            Key = "DATA_SAVE_ERROR",
                            LanguageId = 2,
                            Value = "error while saving data"
                        },
                        new
                        {
                            Id = 14L,
                            Key = "OTP_INVALID",
                            LanguageId = 2,
                            Value = "Invalid OTP!"
                        },
                        new
                        {
                            Id = 15L,
                            Key = "PASSWORD_INVALID",
                            LanguageId = 2,
                            Value = "Invalid password!"
                        },
                        new
                        {
                            Id = 16L,
                            Key = "TOKEN_INVALID",
                            LanguageId = 2,
                            Value = "Invalid Token"
                        },
                        new
                        {
                            Id = 17L,
                            Key = "ITEM_NOT_FOUND",
                            LanguageId = 2,
                            Value = "Item Not Found"
                        },
                        new
                        {
                            Id = 18L,
                            Key = "OTP_VALIDATION_SUCCESS",
                            LanguageId = 2,
                            Value = "OTP validated successfully"
                        },
                        new
                        {
                            Id = 19L,
                            Key = "PASSWORD_RESET_SUCCESS",
                            LanguageId = 2,
                            Value = "Password reset successfully"
                        },
                        new
                        {
                            Id = 20L,
                            Key = "PASSWORDS_MISMATCH",
                            LanguageId = 2,
                            Value = "Passwords do not match!"
                        },
                        new
                        {
                            Id = 21L,
                            Key = "REFRESH_TOKEN_NOT_EXIST",
                            LanguageId = 2,
                            Value = "refresh token doesnt exist"
                        },
                        new
                        {
                            Id = 22L,
                            Key = "REQUEST_CANCELED",
                            LanguageId = 2,
                            Value = "Request has been canceled"
                        },
                        new
                        {
                            Id = 23L,
                            Key = "TOKEN_NOT_MATCHED",
                            LanguageId = 2,
                            Value = "the token doesn’t match the saved token"
                        },
                        new
                        {
                            Id = 24L,
                            Key = "TOKEN_NOT_EXIST",
                            LanguageId = 2,
                            Value = "Token does not exist"
                        },
                        new
                        {
                            Id = 25L,
                            Key = "TOKEN_REVOKED",
                            LanguageId = 2,
                            Value = "token has been revoked"
                        },
                        new
                        {
                            Id = 26L,
                            Key = "TOKEN_USED",
                            LanguageId = 2,
                            Value = "token has been used"
                        },
                        new
                        {
                            Id = 27L,
                            Key = "TOKEN_EXPIRED",
                            LanguageId = 2,
                            Value = "token has expired, user needs to relogin"
                        },
                        new
                        {
                            Id = 28L,
                            Key = "TWO_FACTOR_ENABLED_SUCCESS",
                            LanguageId = 2,
                            Value = "Two factor authentication enabled successfully"
                        },
                        new
                        {
                            Id = 29L,
                            Key = "USER_ALREADY_EXISTS",
                            LanguageId = 2,
                            Value = "User already exists!"
                        },
                        new
                        {
                            Id = 30L,
                            Key = "USER_CREATED_SUCCESS",
                            LanguageId = 2,
                            Value = "User created successfully"
                        },
                        new
                        {
                            Id = 31L,
                            Key = "USER_NOT_EXIST",
                            LanguageId = 2,
                            Value = "User does not exist!"
                        },
                        new
                        {
                            Id = 32L,
                            Key = "USER_LOGGED_OUT",
                            LanguageId = 2,
                            Value = "User logged out"
                        },
                        new
                        {
                            Id = 33L,
                            Key = "TOKEN_NOT_EXPIRED_CANNOT_REFRESH",
                            LanguageId = 2,
                            Value = "We cannot refresh this since the token has not expired"
                        },
                        new
                        {
                            Id = 34L,
                            Key = "RESOURCE_ALREADY_EXISTS",
                            LanguageId = 2,
                            Value = "Record already exists"
                        },
                        new
                        {
                            Id = 35L,
                            Key = "DATA_RESTORED_SUCCESS",
                            LanguageId = 2,
                            Value = "Record successfully restored"
                        },
                        new
                        {
                            Id = 36L,
                            Key = "REQUIRED_FIELD",
                            LanguageId = 1,
                            Value = "هذا الحقل مطلوب"
                        },
                        new
                        {
                            Id = 37L,
                            Key = "TOKEN_VALIDATION_FAILED",
                            LanguageId = 1,
                            Value = "تعذر التحقق من صحة الرمز"
                        },
                        new
                        {
                            Id = 38L,
                            Key = "PASSWORD_RESET_EMAIL_SENT",
                            LanguageId = 1,
                            Value = "تحقق من بريدك الإلكتروني لإعادة تعيين كلمة المرور الخاصة بك"
                        },
                        new
                        {
                            Id = 39L,
                            Key = "DATA_LOAD_SUCCESS",
                            LanguageId = 1,
                            Value = "تم تحميل البيانات بنجاح"
                        },
                        new
                        {
                            Id = 40L,
                            Key = "DATA_MODIFY_SUCCESS",
                            LanguageId = 1,
                            Value = "تم تعديل البيانات بنجاح"
                        },
                        new
                        {
                            Id = 41L,
                            Key = "DATA_REMOVE_SUCCESS",
                            LanguageId = 1,
                            Value = "تمت إزالة البيانات بنجاح"
                        },
                        new
                        {
                            Id = 42L,
                            Key = "DATA_SAVE_SUCCESS",
                            LanguageId = 1,
                            Value = "تم حفظ البيانات بنجاح"
                        },
                        new
                        {
                            Id = 43L,
                            Key = "EMAIL_CONFIRM_SUCCESS",
                            LanguageId = 1,
                            Value = "تم تأكيد البريد الإلكتروني بنجاح"
                        },
                        new
                        {
                            Id = 44L,
                            Key = "EMAIL_CONFIRM_ERROR",
                            LanguageId = 1,
                            Value = "خطأ أثناء تأكيد البريد الإلكتروني الخاص بك"
                        },
                        new
                        {
                            Id = 45L,
                            Key = "DATA_LOAD_ERROR",
                            LanguageId = 1,
                            Value = "حدث خطأ أثناء تحميل البيانات"
                        },
                        new
                        {
                            Id = 46L,
                            Key = "DATA_READ_ERROR",
                            LanguageId = 1,
                            Value = "حدث خطأ أثناء قراءة البيانات"
                        },
                        new
                        {
                            Id = 47L,
                            Key = "DATA_REMOVE_ERROR",
                            LanguageId = 1,
                            Value = "حدث خطأ أثناء إزالة البيانات"
                        },
                        new
                        {
                            Id = 48L,
                            Key = "DATA_SAVE_ERROR",
                            LanguageId = 1,
                            Value = "حدث خطأ أثناء حفظ البيانات"
                        },
                        new
                        {
                            Id = 49L,
                            Key = "OTP_INVALID",
                            LanguageId = 1,
                            Value = "رمز التحقق غير صالح!"
                        },
                        new
                        {
                            Id = 50L,
                            Key = "PASSWORD_INVALID",
                            LanguageId = 1,
                            Value = "كلمة المرور غير صالحة!"
                        },
                        new
                        {
                            Id = 51L,
                            Key = "TOKEN_INVALID",
                            LanguageId = 1,
                            Value = "الرمز غير صالح"
                        },
                        new
                        {
                            Id = 52L,
                            Key = "ITEM_NOT_FOUND",
                            LanguageId = 1,
                            Value = "العنصر غير موجود"
                        },
                        new
                        {
                            Id = 53L,
                            Key = "OTP_VALIDATION_SUCCESS",
                            LanguageId = 1,
                            Value = "تم التحقق من رمز التحقق بنجاح"
                        },
                        new
                        {
                            Id = 54L,
                            Key = "PASSWORD_RESET_SUCCESS",
                            LanguageId = 1,
                            Value = "تم إعادة تعيين كلمة المرور بنجاح"
                        },
                        new
                        {
                            Id = 55L,
                            Key = "PASSWORDS_MISMATCH",
                            LanguageId = 1,
                            Value = "كلمات المرور غير متطابقة!"
                        },
                        new
                        {
                            Id = 56L,
                            Key = "REFRESH_TOKEN_NOT_EXIST",
                            LanguageId = 1,
                            Value = "رمز التحديث غير موجود"
                        },
                        new
                        {
                            Id = 57L,
                            Key = "REQUEST_CANCELED",
                            LanguageId = 1,
                            Value = "تم إلغاء الطلب"
                        },
                        new
                        {
                            Id = 58L,
                            Key = "TOKEN_NOT_MATCHED",
                            LanguageId = 1,
                            Value = "الرمز لا يتطابق مع الرمز المحفوظ"
                        },
                        new
                        {
                            Id = 59L,
                            Key = "TOKEN_NOT_EXIST",
                            LanguageId = 1,
                            Value = "الرمز غير موجود"
                        },
                        new
                        {
                            Id = 60L,
                            Key = "TOKEN_REVOKED",
                            LanguageId = 1,
                            Value = "تم إلغاء الرمز"
                        },
                        new
                        {
                            Id = 61L,
                            Key = "TOKEN_USED",
                            LanguageId = 1,
                            Value = "تم استخدام الرمز"
                        },
                        new
                        {
                            Id = 62L,
                            Key = "TOKEN_EXPIRED",
                            LanguageId = 1,
                            Value = "انتهت صلاحية الرمز، يحتاج المستخدم إلى إعادة تسجيل الدخول"
                        },
                        new
                        {
                            Id = 63L,
                            Key = "TWO_FACTOR_ENABLED_SUCCESS",
                            LanguageId = 1,
                            Value = "تم تفعيل التحقق الثنائي بنجاح"
                        },
                        new
                        {
                            Id = 64L,
                            Key = "USER_ALREADY_EXISTS",
                            LanguageId = 1,
                            Value = "المستخدم موجود بالفعل!"
                        },
                        new
                        {
                            Id = 65L,
                            Key = "USER_CREATED_SUCCESS",
                            LanguageId = 1,
                            Value = "تم إنشاء المستخدم بنجاح"
                        },
                        new
                        {
                            Id = 66L,
                            Key = "USER_NOT_EXIST",
                            LanguageId = 1,
                            Value = "المستخدم غير موجود!"
                        },
                        new
                        {
                            Id = 67L,
                            Key = "USER_LOGGED_OUT",
                            LanguageId = 1,
                            Value = "تم تسجيل خروج المستخدم"
                        },
                        new
                        {
                            Id = 68L,
                            Key = "TOKEN_NOT_EXPIRED_CANNOT_REFRESH",
                            LanguageId = 1,
                            Value = "لا يمكننا تحديثه لأن الرمز لم تنته صلاحيته بعد"
                        },
                        new
                        {
                            Id = 69L,
                            Key = "RESOURCE_ALREADY_EXISTS",
                            LanguageId = 1,
                            Value = "البيانات مدخلة مسبقاً"
                        },
                        new
                        {
                            Id = 70L,
                            Key = "DATA_RESTORED_SUCCESS",
                            LanguageId = 1,
                            Value = "تم استعادة البيانات بنجاح"
                        });
                });

            modelBuilder.Entity("MmaSolution.Core.Database.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NotificationStatus")
                        .HasColumnType("int");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int>("Periority")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NotificationType", "NotificationStatus", "Periority", "ExpireTime", "IsRead");

                    b.ToTable("Notifications", "dbo");

                    b.HasDiscriminator().HasValue("Notification");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MmaSolution.Core.Database.Notifications.NotificationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("NotificationStatuses", "dbo");
                });

            modelBuilder.Entity("MmaSolution.Core.Database.Notifications.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("NotificationTypes", "dbo");
                });

            modelBuilder.Entity("MmaSolution.Core.Database.Tables.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FilePath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("FileSize")
                        .HasColumnType("decimal(9,3)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Attachments", "dbo");
                });

            modelBuilder.Entity("MmaSolution.Core.Database.Tables.SysSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Environment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SysKey")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SysValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SysKey");

                    b.ToTable("SysSettings", "dbo");
                });

            modelBuilder.Entity("MmaSolution.Core.Database.Notifications.EmailNotification", b =>
                {
                    b.HasBaseType("MmaSolution.Core.Database.Notifications.Notification");

                    b.HasDiscriminator().HasValue("EmailNotification");
                });

            modelBuilder.Entity("MmaSolution.Core.Database.Notifications.PushNotification", b =>
                {
                    b.HasBaseType("MmaSolution.Core.Database.Notifications.Notification");

                    b.HasDiscriminator().HasValue("PushNotification");
                });

            modelBuilder.Entity("MmaSolution.Core.Database.Notifications.SmsNotification", b =>
                {
                    b.HasBaseType("MmaSolution.Core.Database.Notifications.Notification");

                    b.HasDiscriminator().HasValue("SmsNotification");
                });

            modelBuilder.Entity("MmaSolution.Core.Database.Localization.Resource", b =>
                {
                    b.HasOne("MmaSolution.Core.Database.Localization.Language", "Language")
                        .WithMany("Resources")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MmaSolution.Core.Database.Localization.Language", b =>
                {
                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}
